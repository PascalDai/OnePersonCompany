---
// 不再使用mock数据
// import { getProjectsWithTasks } from "@/lib/mock-data";
import type { Project, Task, TaskStatus } from "@/lib/types";
// 引入Astro内容集合API
import { getCollection, type CollectionEntry } from "astro:content";
// 引入UI组件
import {
  Card,
  CardHeader,
  CardTitle,
  CardDescription,
  CardContent,
} from "./ui/card";
import { Badge } from "./ui/badge";

// 定义扩展的任务类型，包含projectSlug属性
interface TaskWithProject extends Task {
  projectTitle: string;
  projectSlug?: string;
}

// 获取博客文章数据
const blogEntries = await getCollection("blog");

// 调试：打印出所有博客条目的slug
console.log("博客条目slugs:");
blogEntries.forEach((entry: CollectionEntry<"blog">) => {
  const originalSlug = entry.slug;
  const cleanSlug = originalSlug.replace(/^\d{4}-\d{2}-\d{2}-/, "");
  console.log(`${entry.id} => 原始slug: ${originalSlug}, 处理后: ${cleanSlug}`);
});

// 从博客文章中提取项目信息
const projectsMap = new Map<string, Project>();

// 添加调试信息
console.log(`总共找到 ${blogEntries.length} 篇博客文章`);

// 用于存储文章slug和类型的映射
const entryMap = new Map<
  string,
  { slug: string; type: string; projectId?: string; taskId?: string }
>();

// 处理博客文章，提取项目和任务信息
blogEntries.forEach((entry: CollectionEntry<"blog">) => {
  const { data, slug } = entry;
  const cleanSlug = slug.replace(/^\d{4}-\d{2}-\d{2}-/, ""); // 移除日期前缀

  // 存储文章信息到映射表，使用清理后的slug
  entryMap.set(`${data.type}-${data.projectId || ""}-${data.taskId || ""}`, {
    slug: cleanSlug, // 使用清理后的slug
    type: data.type,
    projectId: data.projectId,
    taskId: data.taskId,
  });

  // 添加调试信息
  console.log(
    `处理文章: ${entry.id}, 类型: ${data.type}, 项目ID: ${data.projectId}, 任务ID: ${data.taskId || "N/A"}`
  );

  // 提取项目信息（如果存在）
  if (data.type === "project" && data.projectId) {
    console.log(
      `发现项目: ${data.projectTitle || data.title} (ID: ${data.projectId})`
    );
    const projectSlug = cleanSlug;

    if (!projectsMap.has(data.projectId)) {
      console.log(`创建新项目 ${data.projectId}，设置slug为: ${projectSlug}`);

      projectsMap.set(data.projectId, {
        id: data.projectId,
        title: data.projectTitle || data.title,
        description: data.description,
        tasks: [],
        createdAt: new Date(data.pubDate),
        updatedAt: new Date(data.pubDate),
        slug: projectSlug, // 使用清理后的slug
      });
    } else {
      // 更新现有项目的 slug（如果需要）
      const existingProject = projectsMap.get(data.projectId);
      if (existingProject && !existingProject.slug) {
        console.log(`更新已有项目 ${data.projectId} 的slug为: ${projectSlug}`);
        existingProject.slug = projectSlug;
      } else {
        console.log(
          `项目 ${data.projectId} 已存在且已有slug: ${existingProject?.slug}`
        );
      }
    }
  }

  // 提取任务信息（如果存在）
  if (data.type === "task" && data.taskId && data.projectId) {
    console.log(
      `发现任务: ${data.taskTitle || data.title} (ID: ${data.taskId}, 状态: ${data.status || "unknown"})`
    );
    const task: Task = {
      id: data.taskId,
      title: data.taskTitle || data.title,
      description: data.description,
      status: data.status || "todo",
      projectId: data.projectId,
      createdAt: new Date(data.pubDate),
      updatedAt: new Date(data.pubDate),
      slug: cleanSlug, // 使用清理后的slug
    };

    // 将任务添加到对应项目
    if (projectsMap.has(data.projectId)) {
      const project = projectsMap.get(data.projectId);
      if (project) {
        project.tasks.push(task);
        console.log(`任务 ${data.taskId} 已添加到项目 ${data.projectId}`);
      } else {
        console.log(
          `警告: 找不到项目 ${data.projectId} 来添加任务 ${data.taskId}`
        );
      }
    } else {
      console.log(
        `警告: 项目 ${data.projectId} 不存在于projectsMap中，为任务 ${data.taskId} 创建新项目`
      );
      // 如果项目不存在，创建一个新项目
      projectsMap.set(data.projectId, {
        id: data.projectId,
        title: data.projectTitle || "未知项目",
        description: "自动创建的项目",
        tasks: [task],
        createdAt: new Date(data.pubDate),
        updatedAt: new Date(data.pubDate),
      });
    }
  }
});

// 转换为数组
const projects = Array.from(projectsMap.values());

console.log(`共提取出 ${projects.length} 个项目`);
projects.forEach((project, idx) => {
  console.log(
    `项目 ${idx + 1}/${project.id}: ${project.title} - slug: ${project.slug || "无"} - 共有 ${project.tasks.length} 个任务`
  );
  console.log("项目详细数据:", JSON.stringify(project, null, 2));
  project.tasks.forEach((task) => {
    console.log(
      `  - 任务 ${task.id}: ${task.title} (${task.status}), slug: ${task.slug || "无"}`
    );
  });
});

// 状态颜色映射
const statusColors = {
  todo: "secondary",
  "in-progress": "warning",
  completed: "success",
} as const;

// 状态标签映射
const statusLabels = {
  todo: "待办",
  "in-progress": "进行中",
  completed: "已完成",
} as const;

// 合并所有任务并添加项目标题
const allTasks = projects.flatMap(
  (project) =>
    project.tasks.map((task) => ({
      ...task,
      projectTitle: project.title,
      projectSlug: project.slug, // 添加项目的slug
    })) as TaskWithProject[]
);

// 按状态分组
const todoTasks = allTasks.filter((task) => task.status === "todo");
const inProgressTasks = allTasks.filter(
  (task) => task.status === "in-progress"
);
const completedTasks = allTasks.filter((task) => task.status === "completed");

console.log(
  `总任务数: ${allTasks.length}, 待办: ${todoTasks.length}, 进行中: ${inProgressTasks.length}, 已完成: ${completedTasks.length}`
);

// 获取链接地址的辅助函数
function getBlogUrl(slug: string) {
  // slug应该已经是处理过的，直接使用
  return `/blog/${slug}`;
}
---

<section id="kanban" class="min-h-screen pt-20 pb-16">
  <!-- 添加调试信息显示
  <div class="container mx-auto px-4 mb-8 p-4 bg-muted/30 rounded-lg text-xs">
    <h3 class="font-bold mb-2">调试信息:</h3>
    <p>找到 {blogEntries.length} 篇博客文章</p>
    <p>提取出 {projects.length} 个项目</p>
    <p>
      总任务数: {allTasks.length}, 待办: {todoTasks.length}, 进行中: {
        inProgressTasks.length
      }, 已完成: {completedTasks.length}
    </p>
  </div> -->

  <div class="container mx-auto px-4">
    <div class="flex justify-between items-center mb-8">
      <h2 class="text-3xl font-bold">我的工作记录</h2>
      <div class="flex space-x-2 bg-muted p-1 rounded-lg">
        <button
          class="px-4 py-2 rounded-md text-sm font-medium transition-colors js-projects-tab active-tab font-bold text-primary"
          data-tab="projects"
          aria-pressed="true"
        >
          <span class="flex items-center">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="h-4 w-4 mr-1"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
            >
              <path d="M20 7h-3a2 2 0 0 1-2-2V2"></path>
              <path
                d="M9 18a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h7l4 4v10a2 2 0 0 1-2 2H9Z"
              ></path>
            </svg>
            项目
          </span>
        </button>
        <button
          class="px-4 py-2 rounded-md text-sm font-medium transition-colors js-tasks-tab"
          data-tab="tasks"
          aria-pressed="false"
        >
          <span class="flex items-center">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="h-4 w-4 mr-1"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
            >
              <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
              <line x1="16" y1="2" x2="16" y2="6"></line>
              <line x1="8" y1="2" x2="8" y2="6"></line>
              <line x1="3" y1="10" x2="21" y2="10"></line>
            </svg>
            任务
          </span>
        </button>
      </div>
    </div>

    <div class="projects-view">
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {
          projects.map((project, index) => {
            console.log(
              `渲染项目卡片 #${index + 1}: ${project.title}, slug=${project.slug || "无"}`
            );
            return (
              <Card className="h-full flex flex-col">
                <CardHeader>
                  {project.slug ? (
                    <CardTitle>
                      <a
                        href={`/blog/${project.slug}`}
                        class="hover:text-primary transition-colors"
                      >
                        {project.title}
                      </a>
                    </CardTitle>
                  ) : (
                    <CardTitle>{project.title}</CardTitle>
                  )}
                  <CardDescription>{project.description}</CardDescription>
                </CardHeader>
                <CardContent className="flex-grow">
                  <div class="space-y-4">
                    <div class="flex items-center justify-between text-sm">
                      <span class="text-muted-foreground">任务:</span>
                      <span class="font-medium">{project.tasks.length}个</span>
                    </div>

                    <div class="space-y-2">
                      {project.tasks.slice(0, 3).map((task) => (
                        <div class="flex items-center justify-between p-3 bg-muted/50 rounded-md">
                          <span class="font-medium truncate mr-2">
                            {task.slug ? (
                              <a
                                href={getBlogUrl(task.slug)}
                                class="hover:text-primary transition-colors"
                              >
                                {task.title}
                              </a>
                            ) : (
                              task.title
                            )}
                          </span>
                          <Badge variant={statusColors[task.status]}>
                            {statusLabels[task.status]}
                          </Badge>
                        </div>
                      ))}

                      {project.tasks.length > 3 && (
                        <div class="text-center text-sm text-muted-foreground mt-2">
                          +{project.tasks.length - 3}个更多任务
                        </div>
                      )}

                      {project.tasks.length === 0 && (
                        <div class="text-center py-3 text-sm text-muted-foreground">
                          暂无任务
                        </div>
                      )}
                    </div>
                  </div>
                </CardContent>
              </Card>
            );
          })
        }
      </div>
    </div>

    <div class="tasks-view hidden">
      <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
        <!-- 待办任务列 -->
        <div>
          <div class="flex items-center mb-4">
            <h3 class="text-lg font-semibold">待办</h3>
            <Badge variant={statusColors.todo} className="ml-2">
              {todoTasks.length}
            </Badge>
          </div>

          <div class="space-y-3">
            {
              todoTasks.map((task: TaskWithProject) => (
                <Card className="overflow-hidden">
                  <CardHeader className="p-4 pb-2">
                    <CardTitle className="text-base">
                      {task.slug ? (
                        <a
                          href={getBlogUrl(task.slug)}
                          class="hover:text-primary transition-colors"
                        >
                          {task.title}
                        </a>
                      ) : (
                        task.title
                      )}
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="p-4 pt-0">
                    <p class="text-sm text-muted-foreground mb-2 line-clamp-2">
                      {task.description}
                    </p>
                    <div class="flex items-center justify-between">
                      <span class="text-xs font-medium bg-primary/10 text-primary px-2 py-1 rounded-full">
                        {task.projectSlug ? (
                          <a
                            href={getBlogUrl(task.projectSlug)}
                            class="hover:underline"
                          >
                            {task.projectTitle}
                          </a>
                        ) : (
                          task.projectTitle
                        )}
                      </span>
                      <span class="text-xs text-muted-foreground">
                        {new Date(task.updatedAt).toLocaleDateString()}
                      </span>
                    </div>
                  </CardContent>
                </Card>
              ))
            }

            {
              todoTasks.length === 0 && (
                <div class="text-center p-4 bg-muted/30 rounded-lg text-sm text-muted-foreground">
                  暂无待办的任务
                </div>
              )
            }
          </div>
        </div>

        <!-- 进行中任务列 -->
        <div>
          <div class="flex items-center mb-4">
            <h3 class="text-lg font-semibold">进行中</h3>
            <Badge variant={statusColors["in-progress"]} className="ml-2">
              {inProgressTasks.length}
            </Badge>
          </div>

          <div class="space-y-3">
            {
              inProgressTasks.map((task: TaskWithProject) => (
                <Card className="overflow-hidden">
                  <CardHeader className="p-4 pb-2">
                    <CardTitle className="text-base">
                      {task.slug ? (
                        <a
                          href={getBlogUrl(task.slug)}
                          class="hover:text-primary transition-colors"
                        >
                          {task.title}
                        </a>
                      ) : (
                        task.title
                      )}
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="p-4 pt-0">
                    <p class="text-sm text-muted-foreground mb-2 line-clamp-2">
                      {task.description}
                    </p>
                    <div class="flex items-center justify-between">
                      <span class="text-xs font-medium bg-primary/10 text-primary px-2 py-1 rounded-full">
                        {task.projectSlug ? (
                          <a
                            href={getBlogUrl(task.projectSlug)}
                            class="hover:underline"
                          >
                            {task.projectTitle}
                          </a>
                        ) : (
                          task.projectTitle
                        )}
                      </span>
                      <span class="text-xs text-muted-foreground">
                        {new Date(task.updatedAt).toLocaleDateString()}
                      </span>
                    </div>
                  </CardContent>
                </Card>
              ))
            }

            {
              inProgressTasks.length === 0 && (
                <div class="text-center p-4 bg-muted/30 rounded-lg text-sm text-muted-foreground">
                  暂无进行中的任务
                </div>
              )
            }
          </div>
        </div>

        <!-- 已完成任务列 -->
        <div>
          <div class="flex items-center mb-4">
            <h3 class="text-lg font-semibold">已完成</h3>
            <Badge variant={statusColors.completed} className="ml-2">
              {completedTasks.length}
            </Badge>
          </div>

          <div class="space-y-3">
            {
              completedTasks.map((task: TaskWithProject) => (
                <Card className="overflow-hidden">
                  <CardHeader className="p-4 pb-2">
                    <CardTitle className="text-base">
                      {task.slug ? (
                        <a
                          href={getBlogUrl(task.slug)}
                          class="hover:text-primary transition-colors"
                        >
                          {task.title}
                        </a>
                      ) : (
                        task.title
                      )}
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="p-4 pt-0">
                    <p class="text-sm text-muted-foreground mb-2 line-clamp-2">
                      {task.description}
                    </p>
                    <div class="flex items-center justify-between">
                      <span class="text-xs font-medium bg-primary/10 text-primary px-2 py-1 rounded-full">
                        {task.projectSlug ? (
                          <a
                            href={getBlogUrl(task.projectSlug)}
                            class="hover:underline"
                          >
                            {task.projectTitle}
                          </a>
                        ) : (
                          task.projectTitle
                        )}
                      </span>
                      <span class="text-xs text-muted-foreground">
                        {new Date(task.updatedAt).toLocaleDateString()}
                      </span>
                    </div>
                  </CardContent>
                </Card>
              ))
            }

            {
              completedTasks.length === 0 && (
                <div class="text-center p-4 bg-muted/30 rounded-lg text-sm text-muted-foreground">
                  暂无已完成的任务
                </div>
              )
            }
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<script>
  // 处理标签切换逻辑
  document.addEventListener("DOMContentLoaded", () => {
    const projectsTab = document.querySelector(".js-projects-tab");
    const tasksTab = document.querySelector(".js-tasks-tab");
    const projectsView = document.querySelector(".projects-view");
    const tasksView = document.querySelector(".tasks-view");

    // 添加当前状态展示的函数
    function updateTabState(
      activeTab: Element | null,
      inactiveTab: Element | null
    ) {
      if (activeTab && inactiveTab) {
        // 设置ARIA属性以增强可访问性
        activeTab.setAttribute("aria-pressed", "true");
        inactiveTab.setAttribute("aria-pressed", "false");

        // 添加激活样式
        activeTab.classList.add("active-tab", "font-bold", "text-primary");
        inactiveTab.classList.remove("active-tab", "font-bold", "text-primary");
      }
    }

    // 初始化标签状态，确保页面加载时应用正确样式
    updateTabState(projectsTab, tasksTab);

    projectsTab?.addEventListener("click", () => {
      projectsView?.classList.remove("hidden");
      tasksView?.classList.add("hidden");
      updateTabState(projectsTab, tasksTab);
    });

    tasksTab?.addEventListener("click", () => {
      tasksView?.classList.remove("hidden");
      projectsView?.classList.add("hidden");
      updateTabState(tasksTab, projectsTab);
    });
  });
</script>

<style>
  .active-tab {
    background-color: var(--background);
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    position: relative;
  }

  .active-tab::after {
    content: "";
    position: absolute;
    bottom: -2px;
    left: 0;
    right: 0;
    height: 2px;
    background-color: currentColor;
    border-radius: 1px;
  }

  .hidden {
    display: none;
  }
</style>
