---
import BaseLayout from "../layouts/BaseLayout.astro";
import {
  Card,
  CardHeader,
  CardTitle,
  CardDescription,
  CardContent,
  CardFooter,
} from "../components/ui/card";
import { Badge } from "../components/ui/badge";
import { getCollection, type CollectionEntry } from "astro:content";
import type { Project, Task, TaskStatus } from "@/lib/types";
import TasksSelect from "../components/TasksSelect.astro";

// 获取所有任务和项目数据（在构建时执行）
const blogEntries = await getCollection("blog");

// 创建项目映射
const projectsMap = new Map<string, Project>();

// 存储所有任务信息
interface ExtendedTask extends Task {
  projectTitle: string;
  projectSlug?: string;
}

const allTasks: ExtendedTask[] = [];

// 处理博客文章，提取项目和任务信息
// 第一遍：首先从所有博客文章中提取项目和任务信息
blogEntries.forEach((entry: CollectionEntry<"blog">) => {
  const { data, slug } = entry;
  const cleanSlug = slug.replace(/^\d{4}-\d{2}-\d{2}-/, ""); // 移除日期前缀

  // 添加调试日志
  console.log(
    `处理文章: ${entry.id}, 类型: ${data.type}, projectId: ${data.projectId || "无"}, slug: ${cleanSlug}`
  );

  // 提取项目信息
  if (data.type === "project" && data.projectId) {
    console.log(
      `发现项目: ${data.projectTitle || data.title}, ID: ${data.projectId}, slug: ${cleanSlug}`
    );

    if (!projectsMap.has(data.projectId)) {
      projectsMap.set(data.projectId, {
        id: data.projectId,
        title: data.projectTitle || data.title,
        description: data.description,
        tasks: [],
        createdAt: new Date(data.pubDate),
        updatedAt: new Date(data.pubDate),
        slug: cleanSlug,
      });
    } else {
      // 如果项目已存在，确保更新slug
      const project = projectsMap.get(data.projectId);
      if (project && !project.slug) {
        console.log(`更新已有项目 ${data.projectId} 的slug为: ${cleanSlug}`);
        project.slug = cleanSlug;
      }
    }
  }
});

// 第二遍：为所有项目记录slug
// 创建项目ID到slug的映射
const projectIdToSlugMap = new Map<string, string>();

// 从项目类型的博客条目中建立映射
blogEntries.forEach((entry: CollectionEntry<"blog">) => {
  const { data, slug } = entry;

  if (data.type === "project" && data.projectId) {
    const cleanSlug = slug.replace(/^\d{4}-\d{2}-\d{2}-/, "");
    projectIdToSlugMap.set(data.projectId, cleanSlug);
    console.log(`项目ID ${data.projectId} 映射到slug: ${cleanSlug}`);
  }
});

// 确保所有项目都有slug
projectsMap.forEach((project, id) => {
  if (!project.slug && projectIdToSlugMap.has(id)) {
    project.slug = projectIdToSlugMap.get(id);
    console.log(`更新项目 ${id} 的slug为: ${project.slug}`);
  }
});

// 第三遍：处理任务并关联到项目
blogEntries.forEach((entry: CollectionEntry<"blog">) => {
  const { data, slug } = entry;
  const cleanSlug = slug.replace(/^\d{4}-\d{2}-\d{2}-/, "");

  // 提取任务信息
  if (data.type === "task" && data.taskId && data.projectId) {
    const task: Task = {
      id: data.taskId,
      title: data.taskTitle || data.title,
      description: data.description,
      status: data.status || "todo",
      projectId: data.projectId,
      createdAt: new Date(data.pubDate),
      updatedAt: new Date(data.pubDate),
      slug: cleanSlug,
    };

    // 将任务添加到对应项目
    if (projectsMap.has(data.projectId)) {
      const project = projectsMap.get(data.projectId);
      if (project) {
        project.tasks.push(task);
      }
    }

    // 为每个任务添加项目标题和项目slug
    const projectTitle = projectsMap.has(data.projectId)
      ? projectsMap.get(data.projectId)?.title || "未知项目"
      : "未知项目";

    // 获取项目slug - 首先从projectsMap获取，如果没有则从映射表获取
    let projectSlug = undefined;
    if (projectsMap.has(data.projectId)) {
      const project = projectsMap.get(data.projectId);
      projectSlug = project?.slug;
    }

    // 如果通过项目映射没找到slug，则尝试从映射表直接获取
    if (!projectSlug && projectIdToSlugMap.has(data.projectId)) {
      projectSlug = projectIdToSlugMap.get(data.projectId);
      console.log(
        `为任务${data.taskId}从映射表获取projectSlug: ${projectSlug}`
      );
    }

    // 添加到所有任务列表
    allTasks.push({
      ...task,
      projectTitle,
      projectSlug,
    });
  }
});

// 在处理完所有条目后，输出projectsMap内容进行检查
console.log("项目映射表内容:");
projectsMap.forEach((project, id) => {
  console.log(
    `项目ID: ${id}, 标题: ${project.title}, slug: ${project.slug || "无"}`
  );
});

// 输出任务信息
console.log("任务信息:");
allTasks.forEach((task) => {
  console.log(
    `任务ID: ${task.id}, 标题: ${task.title}, 项目ID: ${task.projectId}, 项目标题: ${task.projectTitle}, 项目slug: ${task.projectSlug || "无"}`
  );
});

// 排序：按状态（进行中 > 待办 > 已完成）和创建时间
const statusOrder = {
  "in-progress": 0,
  todo: 1,
  completed: 2,
};

allTasks.sort((a, b) => {
  // 首先按状态排序
  const statusDiff =
    statusOrder[a.status as keyof typeof statusOrder] -
    statusOrder[b.status as keyof typeof statusOrder];
  if (statusDiff !== 0) return statusDiff;

  // 然后按创建时间排序（较早创建的排在前面）
  return a.createdAt.getTime() - b.createdAt.getTime();
});

// 准备项目下拉菜单选项
const projects = Array.from(projectsMap.values());

// 状态标签映射
const statusLabels = {
  todo: "待办",
  "in-progress": "进行中",
  completed: "已完成",
} as const;

// 状态颜色映射
const statusColors = {
  todo: "secondary",
  "in-progress": "warning",
  completed: "success",
} as const;
---

<BaseLayout title="任务列表 | One Person Company" description="查看所有任务">
  <section class="py-16 px-4">
    <div class="container mx-auto" id="tasks-container">
      <header class="mb-8">
        <h1 class="text-3xl font-bold mb-2">任务列表</h1>
        <p class="text-muted-foreground">
          共 <span id="visible-tasks-count">{allTasks.length}</span> 个任务
          <span id="project-filter-text"></span>
          <span id="status-filter-text"></span>
        </p>
      </header>

      <!-- 筛选区域 -->
      <div class="mb-8">
        <div class="bg-card border rounded-lg p-4 shadow-sm">
          <div class="flex flex-wrap gap-4">
            <!-- 项目筛选 -->
            <TasksSelect
              id="project-filter"
              label="项目"
              options={[
                { value: "", label: "全部项目" },
                ...projects.map((project) => ({
                  value: project.id,
                  label: project.title,
                })),
              ]}
              currentValue={Astro.url.searchParams.get("project") || ""}
            />

            <!-- 状态筛选 -->
            <TasksSelect
              id="status-filter"
              label="状态"
              options={[
                { value: "", label: "全部状态" },
                { value: "in-progress", label: "进行中" },
                { value: "todo", label: "待办" },
                { value: "completed", label: "已完成" },
              ]}
              currentValue={Astro.url.searchParams.get("status") || ""}
            />
            <!-- 添加重置筛选按钮 -->
            <div class="flex items-end">
              <a
                href="/tasks"
                class="px-4 py-2 text-sm bg-secondary text-secondary-foreground rounded-md hover:bg-secondary/90 transition-colors"
              >
                重置筛选
              </a>
            </div>
          </div>
        </div>
      </div>

      <!-- 任务卡片网格 -->
      <div
        class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8"
        id="task-grid"
      >
        {
          allTasks.map((task: ExtendedTask) => (
            <div
              class="task-card h-full"
              data-task-id={task.id}
              data-project-id={task.projectId}
              data-status={task.status}
            >
              <Card className="h-full flex flex-col transition-all hover:shadow-lg">
                <CardHeader>
                  <div class="flex justify-between items-start">
                    <CardTitle className="text-xl mb-2">
                      <a
                        href={`/blog/${task.slug}`}
                        class="hover:text-primary transition-colors"
                      >
                        {task.title}
                      </a>
                    </CardTitle>
                    <Badge
                      variant={
                        statusColors[task.status as keyof typeof statusColors]
                      }
                      className="whitespace-nowrap"
                    >
                      {statusLabels[task.status as keyof typeof statusLabels]}
                    </Badge>
                  </div>
                  <CardDescription className="line-clamp-2">
                    {task.description}
                  </CardDescription>
                </CardHeader>

                <CardContent className="flex-1">
                  <div class="mt-2">
                    <span class="text-sm text-muted-foreground">
                      所属项目:{" "}
                    </span>
                    {task.projectSlug ? (
                      <a
                        href={`/blog/${task.projectSlug}`}
                        class="text-sm font-medium hover:text-primary transition-colors"
                      >
                        {task.projectTitle}
                      </a>
                    ) : (
                      <span class="text-sm font-medium">
                        {task.projectTitle}
                      </span>
                    )}
                  </div>
                </CardContent>

                <CardFooter className="pt-0 text-xs text-muted-foreground">
                  <div class="w-full flex justify-between">
                    <span>创建于: {task.createdAt.toLocaleDateString()}</span>
                    <a
                      href={`/tasks?project=${task.projectId}`}
                      class="text-xs hover:text-primary transition-colors"
                    >
                      查看同项目相关任务
                    </a>
                  </div>
                </CardFooter>
              </Card>
            </div>
          ))
        }
      </div>

      <!-- 无匹配任务提示 -->
      <div id="no-tasks-message" class="hidden col-span-3 py-16 text-center">
        <div class="text-xl text-muted-foreground">没有找到符合条件的任务</div>
        <a
          href="/tasks"
          class="inline-block mt-4 px-4 py-2 rounded-md bg-primary text-white hover:bg-primary/90 transition-colors"
        >
          查看所有任务
        </a>
      </div>
    </div>
  </section>

  <!-- 客户端筛选脚本 -->
  <script>
    // 初始化页面
    function initTasksPage() {
      // 获取URL参数
      const url = new URL(window.location.href);
      const projectId = url.searchParams.get("project");
      const status = url.searchParams.get("status");
      const page = url.searchParams.get("page");

      console.log(
        `URL参数: project=${projectId}, status=${status}, page=${page}`
      );

      // 设置筛选器初始值
      if (projectId) {
        const projectSelect = document.getElementById(
          "project-filter"
        ) as HTMLSelectElement | null;
        if (projectSelect) {
          projectSelect.value = projectId;
          updateProjectFilterText(projectId);
        }
      }

      if (status) {
        const statusSelect = document.getElementById(
          "status-filter"
        ) as HTMLSelectElement | null;
        if (statusSelect) {
          statusSelect.value = status;
          updateStatusFilterText(status);
        }
      }

      // 应用筛选
      applyFilters(projectId, status);

      // 添加事件监听器
      const projectFilter = document.getElementById(
        "project-filter"
      ) as HTMLSelectElement | null;
      if (projectFilter) {
        projectFilter.addEventListener(
          "change",
          function (this: HTMLSelectElement) {
            const statusFilter = document.getElementById(
              "status-filter"
            ) as HTMLSelectElement | null;
            const statusValue = statusFilter?.value || "";
            updateURL(this.value, statusValue);
          }
        );
      }

      const statusFilter = document.getElementById(
        "status-filter"
      ) as HTMLSelectElement | null;
      if (statusFilter) {
        statusFilter.addEventListener(
          "change",
          function (this: HTMLSelectElement) {
            const projectFilter = document.getElementById(
              "project-filter"
            ) as HTMLSelectElement | null;
            const projectValue = projectFilter?.value || "";
            updateURL(projectValue, this.value);
          }
        );
      }
    }

    // 应用筛选条件
    function applyFilters(projectId: string | null, status: string | null) {
      const taskCards = document.querySelectorAll(".task-card");
      let visibleCount = 0;

      taskCards.forEach((card) => {
        const cardProjectId = (card as HTMLElement).dataset.projectId;
        const cardStatus = (card as HTMLElement).dataset.status;

        let shouldShow = true;

        if (projectId && cardProjectId !== projectId) {
          shouldShow = false;
        }

        if (status && cardStatus !== status) {
          shouldShow = false;
        }

        // 显示或隐藏卡片
        (card as HTMLElement).style.display = shouldShow ? "block" : "none";

        if (shouldShow) {
          visibleCount++;
        }
      });

      // 更新显示任务数量
      const visibleTasksCount = document.getElementById("visible-tasks-count");
      if (visibleTasksCount) {
        visibleTasksCount.textContent = visibleCount.toString();
      }

      // 显示或隐藏"无任务"提示
      const noTasksMessage = document.getElementById("no-tasks-message");
      if (noTasksMessage) {
        if (visibleCount === 0) {
          noTasksMessage.classList.remove("hidden");
        } else {
          noTasksMessage.classList.add("hidden");
        }
      }
    }

    // 更新URL并重新应用筛选
    function updateURL(project: string, status: string) {
      const url = new URL(window.location.href);

      // 清除现有参数
      url.searchParams.delete("project");
      url.searchParams.delete("status");
      url.searchParams.delete("page");

      // 添加新参数
      if (project) {
        url.searchParams.set("project", project);
      }

      if (status) {
        url.searchParams.set("status", status);
      }

      // 更新浏览器历史记录而不刷新页面
      window.history.pushState({}, "", url.toString());

      // 应用新的筛选条件
      applyFilters(project || null, status || null);

      // 更新筛选器文本
      updateProjectFilterText(project);
      updateStatusFilterText(status);
    }

    // 更新项目筛选文本
    function updateProjectFilterText(projectId: string | null) {
      const projectText = document.getElementById("project-filter-text");
      if (!projectText) return;

      if (!projectId) {
        projectText.innerHTML = "";
        return;
      }

      const projectSelect = document.getElementById(
        "project-filter"
      ) as HTMLSelectElement | null;
      if (!projectSelect) return;

      const selectedOption = projectSelect.options[projectSelect.selectedIndex];
      const projectTitle = selectedOption ? selectedOption.textContent : "";

      projectText.innerHTML = `，项目：${projectTitle}`;
    }

    // 更新状态筛选文本
    function updateStatusFilterText(status: string | null) {
      const statusText = document.getElementById("status-filter-text");
      if (!statusText) return;

      if (!status) {
        statusText.innerHTML = "";
        return;
      }

      const statusMap: Record<string, string> = {
        todo: "待办",
        "in-progress": "进行中",
        completed: "已完成",
      };

      statusText.innerHTML = `，状态：${statusMap[status] || status}`;
    }

    // 页面加载完成后初始化
    document.addEventListener("DOMContentLoaded", initTasksPage);
  </script>
</BaseLayout>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>
